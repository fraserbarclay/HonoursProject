import KinectPV2.*;

KinectPV2 kinect;

// Angle for rotation
float a = 0;

void setup() {
  size(1536, 1272, P3D);

  kinect = new KinectPV2(this);

  //Enable point cloud
  kinect.enableDepthImg(true);
  kinect.enablePointCloud(true);

  kinect.init();

}

void draw() {
  background(0);

  // Translate and rotate
  pushMatrix();
  translate(width/2, height/2, 1000);
  //rotateY(a);
  rotateY(3.2);

  //obtain the raw depth data in integers from [0 - 4500]
  int [] rawData = kinect.getRawDepthData();
  
  stroke(255);
  strokeWeight(2);
  beginShape(POINTS);
  for (int x = 0; x < 512; x++) {
    for (int y = 0; y < 424; y++) {
      int offset = x + y * 512;
      int d = rawData[offset];
      //calculte the x, y, z camera position based on the depth information
      PVector point = depthToPointCloudPos(x, y, d);

      // Draw a point
      vertex(point.x, point.y, point.z);
    }
  }
  endShape();

  popMatrix();

  fill(255);
  text(frameRate, 50, 50);

  // Rotate
  a += 0.15;

}

//calculte the xyz camera position based on the depth data
PVector depthToPointCloudPos(int x, int y, float depthValue) {
  PVector point = new PVector();
  point.z = (depthValue);// / (1.0f); // Convert from mm to meters
  point.x = (x - CameraParams.cx) * point.z / CameraParams.fx;
  point.y = (y - CameraParams.cy) * point.z / CameraParams.fy;
  return point;
}